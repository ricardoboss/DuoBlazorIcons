<#@ template language="C#" hostspecific="true" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using DuoBlazorIcons.Components.Icons;

namespace DuoBlazorIcons.Components;

public enum IconName
{
<#
    foreach (var metadata in IconMetadata)
    {
#>
    /// <summary>
    /// Icon <#= metadata.FileName #>
    /// </summary>
    <#= metadata.EnumCaseName #>,
<#
    }
#>
}

/// <summary>
/// Extension methods for <see cref="IconName"/>
/// </summary>
public static class IconNameExtensions
{
    /// <summary>
    /// Get the razor component type for the given <see cref="IconName"/>.
    /// </summary>
    /// <param name="iconName">The icon name</param>
    /// <returns>The icon component type</returns>
    public static Type GetComponentType(this IconName iconName)
    {
        return iconName switch
        {
<#
    foreach (var metadata in IconMetadata)
    {
#>
            IconName.<#= metadata.EnumCaseName #> => typeof(<#= metadata.ComponentName #>),
<#
    }
#>
            _ => throw new ArgumentOutOfRangeException(nameof(iconName), iconName, $"Unknown icon name: {iconName}"),
        };
    }
}
